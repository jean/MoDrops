// Generating :before or :after pseudo-element shapes
@mixin p-el($el, $el-w: null, $el-h: null) {
  @if $el == "before" or $el == "after" { 
    &:#{$el} {
      @extend %pseudos;
      width: $el-w;
      height: $el-h;
      @content;
    }
  } 
  @else {
    @error "`#{$el}` is not a valid pseudo-element.";
  }
}

// BEM selectors
@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Font Smoothing
@mixin font-smoothing($value: antialiased) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

//Font sizes mixin
@mixin font-size($size) {
  @if $size == "tiny" {
    @include adjust-font-size-to($tiny-font-size);
    @include adjust-leading-to($tiny-font-leading);
  }
  @if $size == "small" {
    @include adjust-font-size-to($small-font-size);
    @include adjust-leading-to($small-font-leading);
  }
  @if $size == "base" {
    @include adjust-font-size-to($base-font-size);
    @include adjust-leading-to($base-font-leading);
  }
  @if $size == "medium" {
    @include adjust-font-size-to($medium-font-size);
    @include adjust-leading-to($medium-font-leading);
  }
  @if $size == "large" {
    @include adjust-font-size-to($large-font-size);
    @include adjust-leading-to($large-font-leading);
  }
  @if $size == "xlarge" {
    @include adjust-font-size-to($xlarge-font-size);
    @include adjust-leading-to($xlarge-font-leading);
  }
}

@mixin bg-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background-color: $color;
    }
  }
}

//this is for font smoothing in osx and pc
@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

// Image replacement

@mixin img-replace($img, $w, $h, $disp: block) {
  background-image: url('#{$path--rel}/#{$img}');
  background-repeat: no-repeat;
  width: $w;
  height: $h;
  display: $disp;
}

//Truncate Text values are: clip, ellipsis, or a string
@mixin truncateText($overflow: ellipsis){
  overflow: hidden;
  white-space: nowrap;
  text-overflow: $overflow;
}

// Maintain ratio mixin. Great for responsive grids, or videos.
// https://gist.github.com/brianmcallister/2932463
// 
// $ratio - Ratio the element needs to maintain.
// 
// Examples
// 
//   // A 16:9 ratio would look like this:
//   .element {
//     @include maintain-ratio(16 9);
//   }
@mixin maintain-ratio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
    @warn "$ratio must be a list with two values.";
  }

  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));

  width: $width;
  height: 0;
  padding-bottom: $height;
}

// Media queries

// Breakpoints
$brkpoint--sm    : 1px;
$brkpoint--md    : 768px;
$brkpoint--lg    : 992px;
$brkpoint--xl    : 1200px;

@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint--sm) and (max-width: $brkpoint--md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint--md + 1) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width: $brkpoint--lg + 1) {
      @content;
    }
  }
  @else if $break == "xl" {
    @media (min-width: $brkpoint--xl) {
      @content;
    }
  }
  @else {
    @error "No value could be retrieved for `#{$break}`. "
      }
}




